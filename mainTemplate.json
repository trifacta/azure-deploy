{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "deploymentName": {
            "defaultValue": "trifacta-wrangler",
            "type": "string"
        },
        "servicePrincipalObjectId": {
            "type": "securestring",
            "metadata": {
                "description": "This is the object ID for the service princpal."
            }
        },
        "sshAccessSourceRange": {
            "type": "string"
        },
        "trifactaAccessSourceRange": {
            "type": "string"
        },
        "publicIpAddressType": {
            "defaultValue": "static",
            "type": "string"
        },
        "publicIpAddressSku": {
            "defaultValue": "Basic",
            "type": "string"
        },
        "virtualMachineSize": {
            "type": "string",
            "defaultValue": "Standard_E8s_v3",
            "allowedValues": [
                "Standard_E8s_v3",
                "Standard_E16s_v3",
                "Standard_D16_v3",
                "Standard_D32_v3"
            ]            
        },
        "adminUsername": {
            "type": "string"
        },
        "sshPublicKey": {
            "type": "secureString"
        },
        "databricksMRGID": {
            "type": "string"
        },    
        "trifactaVersion": {
            "type": "string",
            "allowedValues": [
                "8.2.100",
                "7.6.100",
                "7.1.001"
            ],
            "metadata": {
                "description": "The Linux OS Version for the VM Offer. This will trifacta-marketplace image of this given Linux version."
            }
        },
        "storageAccountName": {
            "type": "string"
        }
    },
    "variables": {

        "location": "[resourceGroup().location]",
        "networkSecurityGroupName": "[concat(parameters('deploymentName'), substring(uniqueString(resourceGroup().id),0,2), '-nsg')]",
        "publicIpAddressName": "[concat(parameters('deploymentName'), substring(uniqueString(resourceGroup().id),0,2), '-pip')]",        
        "virtualMachineName": "[concat(parameters('deploymentName'), substring(uniqueString(resourceGroup().id),0,2), '-vm')]",
        "virtualNetwork": {
                "name": "trifacta-wrangler-vnet01",
                "addressPrefixes": [
                    "10.0.1.0/24"
                ],
                "addressPrefix": "10.0.1.0/24",
                "newOrExisting": "new",
                "subnets": {
                    "subnet1": {
                        "name": "subnet-1",
                        "addressPrefix": "10.0.1.0/24",
                        "startAddress": "10.0.1.4"
                    }
                }
            },
        "keyVaultName": "[concat(parameters('deploymentName'), substring(uniqueString(resourceGroup().id),0,2), '-kv')]",
        "imageReferenceTrifactaEnterprise": {
                "publisher": "trifacta",
                "sku": "wrangler-enterprise",
                "offer": "wrangler-enterprise-vm"
        },

        "storageAccount": {
                "name": "[parameters('storageAccountName')]",
                "type": "Standard_LRS",
                "newOrExisting": "new"
        },

        "publicIpAddressId": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]",
        "VNetName": "[concat(parameters('deploymentName'), substring(uniqueString(resourceGroup().id),0,2), '-', variables('virtualNetwork').name)]",
        "NICName": "[concat(parameters('deploymentName'), substring(uniqueString(resourceGroup().id),0,2), '-', variables('virtualNetwork').name, '-nic')]",
        "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
        "storageBlobContributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "storageAccountRoleAssignmentName": "[concat(variables('storageAccount').name, '/Microsoft.Authorization/', guid(uniqueString(variables('storageAccount').name)))]",
        "blobServiceContainerName": "[concat(variables('storageAccount').name, '/default/', concat('trifacta-wrangler', substring(uniqueString(resourceGroup().id),0,2)) )]",
        "databricksMRGIDName": "[if(empty(parameters('databricksMRGID')), concat(parameters('deploymentName'), substring(uniqueString(resourceGroup().id),0,2), '-db'), parameters('databricksMRGID'))]"

    },
    "resources": [{
            "name": "[variables('NICName')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-06-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('VNetName'))]",
                "[resourceId('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]"
            ],
            "properties": {
                "ipConfigurations": [{
                    "name": "ipconfig1",
                    "properties": {
                        "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VNetName'), variables('virtualNetwork').subnets.subnet1.name)]"
                        },
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIpAddress": {
                            "id": "[variables('publicIpAddressId')]"
                        }
                    }
                }],
                "networkSecurityGroup": {
                    "id": "[variables('nsgId')]"
                }
            }
        },
        {
            "name": "[variables('networkSecurityGroupName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "location": "[variables('location')]",
            "properties": {
                "securityRules": [{
                        "name": "SSH",
                        "properties": {
                            "priority": 300,
                            "protocol": "TCP",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "[parameters('sshAccessSourceRange')]",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22"
                        }
                    },
                    {
                        "name": "Trifacta_Service",
                        "properties": {
                            "priority": 200,
                            "protocol": "TCP",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "[parameters('trifactaAccessSourceRange')]",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRanges": ["3005", "80", "443"]
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(variables('virtualNetwork').newOrExisting, 'new')]",
            "name": "[variables('VNetName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-06-01",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[array(variables('virtualNetwork').addressPrefixes)]"
                    
                },
                "subnets": [{
                    "name": "[variables('virtualNetwork').subnets.subnet1.name]",
                    "properties": {
                        "addressPrefix": "[first(variables('virtualNetwork').addressPrefixes)]",
                        "serviceEndpoints": [{
                            "service": "Microsoft.KeyVault"
                        }]
                    }
                }]
            }
        },
        {
            "name": "[variables('publicIpAddressName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2020-06-01",
            "location": "[variables('location')]",
            "properties": {
                "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
            },
            "sku": {
                "name": "[parameters('publicIpAddressSku')]"
            }
        },
        {
            "name": "[variables('virtualMachineName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-06-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces/', variables('NICName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        }
                    },
                    "imageReference": {
                        "publisher": "[variables('imageReferenceTrifactaEnterprise').publisher]",
                        "offer": "[variables('imageReferenceTrifactaEnterprise').offer]",
                        "sku": "[variables('imageReferenceTrifactaEnterprise').sku]",
                        "version": "[parameters('trifactaVersion')]"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [{
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('NICName'))]"
                    }]
                },
                "osProfile": {
                    "computerName": "[variables('virtualMachineName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [{
                                "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                                "keyData": "[parameters('sshPublicKey')]"
                            }]
                        }
                    }
                }
            },
            "plan": {
                "name": "[variables('imageReferenceTrifactaEnterprise').sku]",
                "product": "[variables('imageReferenceTrifactaEnterprise').offer]",
                "publisher": "[variables('imageReferenceTrifactaEnterprise').publisher]"
            }
        },
        {
            "condition": "[equals(variables('storageAccount').newOrExisting, 'new')]",
            "name": "[variables('storageAccount').name]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "location": "[variables('location')]",
            "kind": "StorageV2",
            "sku": {
                "name": "[variables('storageAccount').type]"
            },
            "properties": {
                "encryption": {
                    "keySource": "Microsoft.Storage",
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        }
                    }
                },
                "isHnsEnabled": true,
                "supportsHttpsTrafficOnly": true
            }
        },
        {
            "condition": "[equals(variables('storageAccount').newOrExisting, 'new')]",
            "name": "[variables('blobServiceContainerName')]",
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccount').name)]"
            ]
        },
        {
            "name": "[variables('storageAccountRoleAssignmentName')]",
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2019-04-01-preview",
            "dependsOn": [
                "[variables('storageAccount').name]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('storageBlobContributor')]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "name": "[variables('keyVaultName')]",
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('VNetName'))]"
            ],
            "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": true,
                "accessPolicies": [{
                    "tenantId": "[subscription().tenantId]",
                    "objectId": "[parameters('servicePrincipalObjectId')]",
                    "permissions": {
                        "keys": [
                            "Get",
                            "List",
                            "Update",
                            "Create",
                            "Import",
                            "Delete",
                            "Recover",
                            "Backup",
                            "Restore"
                        ],
                        "secrets": [
                            "Get",
                            "List",
                            "Set",
                            "Delete",
                            "Recover",
                            "Backup",
                            "Restore"
                        ],
                        "certificates": [
                            "Get",
                            "List",
                            "Update",
                            "Create",
                            "Import",
                            "Delete",
                            "Recover",
                            "Backup",
                            "Restore",
                            "ManageContacts",
                            "ManageIssuers",
                            "GetIssuers",
                            "ListIssuers",
                            "SetIssuers",
                            "DeleteIssuers"
                        ]
                    }
                }],
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Deny",
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [{
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VNetName'), variables('virtualNetwork').subnets.subnet1.name)]",
                        "ignoreMissingVnetServiceEndpoint": false
                    }]
                }
            }
        },
        {
            "name": "[variables('databricksMRGIDName')]",
            "type": "Microsoft.Databricks/workspaces",
            "apiVersion": "2018-04-01",
            "location": "[variables('location')]",
            "properties": {
                "managedResourceGroupId": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('databricksMRGIDName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('VNetName'))]"
              ]
        }
    ],
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        },
        "trifactaInstanceName": {
            "type": "string",
            "value": "[variables('virtualMachineName')]"
        }
    }
}